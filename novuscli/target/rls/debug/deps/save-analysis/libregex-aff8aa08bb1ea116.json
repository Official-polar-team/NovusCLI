{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1","program":"/Users/dsmc/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","regex","/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=aff8aa08bb1ea116","-C","extra-filename=-aff8aa08bb1ea116","--out-dir","/Users/dsmc/Documents/Projects/NovusCLI/novuscli/target/rls/debug/deps","-L","dependency=/Users/dsmc/Documents/Projects/NovusCLI/novuscli/target/rls/debug/deps","--extern","regex_syntax=/Users/dsmc/Documents/Projects/NovusCLI/novuscli/target/rls/debug/deps/libregex_syntax-2a8e248a1a25a898.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/dsmc/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/dsmc/Documents/Projects/NovusCLI/novuscli/target/rls/debug/deps/libregex-aff8aa08bb1ea116.rmeta"},"prelude":{"crate_id":{"name":"regex","disambiguator":[11608044062355399396,6835586746002883398]},"crate_root":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src","external_crates":[{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5023031535946102806,1519945200772436769]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14971710667112632204,3779288994815239424]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13929365297553886769,10835487607786681578]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1703814022776569128,10551764917560457909]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10905289896639819248,12378153447800695556]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9875817922157896832,6525866999979462444]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16327553567805037396,13803445574918473825]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8522830685719941355,5926318803845271184]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1264957467986197796,4307507407817205004]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14209462635893683258,5261725291371373837]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[17767136569084421189,11517709274149150814]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6927829448697524174,8965120119738204078]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16003526636929696339,16081502929097916775]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[15776410874500773192,14769858709110954983]}},{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","num":15,"id":{"name":"regex_syntax","disambiguator":[5636911003169097266,14952172975333426950]}}],"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":0,"byte_end":28598,"line_start":1,"line_end":785,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1261},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23823,"byte_end":23828,"line_start":639,"line_end":639,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":864},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24072,"byte_end":24078,"line_start":649,"line_end":649,"column_start":5,"column_end":11},"alias_span":null,"name":"escape","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1905},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24080,"byte_end":24096,"line_start":649,"line_end":649,"column_start":13,"column_end":29},"alias_span":null,"name":"CaptureLocations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1023},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24098,"byte_end":24112,"line_start":649,"line_end":649,"column_start":31,"column_end":45},"alias_span":null,"name":"CaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":932},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24114,"byte_end":24126,"line_start":649,"line_end":649,"column_start":47,"column_end":59},"alias_span":null,"name":"CaptureNames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":968},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24128,"byte_end":24136,"line_start":649,"line_end":649,"column_start":61,"column_end":69},"alias_span":null,"name":"Captures","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":963},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24142,"byte_end":24151,"line_start":650,"line_end":650,"column_start":5,"column_end":14},"alias_span":null,"name":"Locations","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1880},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24153,"byte_end":24158,"line_start":650,"line_end":650,"column_start":16,"column_end":21},"alias_span":null,"name":"Match","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24160,"byte_end":24167,"line_start":650,"line_end":650,"column_start":23,"column_end":30},"alias_span":null,"name":"Matches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1064},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24169,"byte_end":24177,"line_start":650,"line_end":650,"column_start":32,"column_end":40},"alias_span":null,"name":"NoExpand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1900},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24179,"byte_end":24184,"line_start":650,"line_end":650,"column_start":42,"column_end":47},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24186,"byte_end":24194,"line_start":650,"line_end":650,"column_start":49,"column_end":57},"alias_span":null,"name":"Replacer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24196,"byte_end":24207,"line_start":650,"line_end":650,"column_start":59,"column_end":70},"alias_span":null,"name":"ReplacerRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":943},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24209,"byte_end":24214,"line_start":650,"line_end":650,"column_start":72,"column_end":77},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":953},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24220,"byte_end":24226,"line_start":651,"line_end":651,"column_start":5,"column_end":11},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1011},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":24228,"byte_end":24245,"line_start":651,"line_end":651,"column_start":13,"column_end":30},"alias_span":null,"name":"SubCaptureMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":33}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":33}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":33}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23887,"byte_end":23888,"line_start":641,"line_end":641,"column_start":34,"column_end":35},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":33}},{"kind":"Use","ref_id":{"krate":0,"index":115},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28398,"byte_end":28406,"line_start":780,"line_end":780,"column_start":22,"column_end":30},"alias_span":null,"name":"Compiler","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28427,"byte_end":28431,"line_start":781,"line_end":781,"column_start":20,"column_end":24},"alias_span":null,"name":"Exec","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28433,"byte_end":28444,"line_start":781,"line_end":781,"column_start":26,"column_end":37},"alias_span":null,"name":"ExecBuilder","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1399},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28467,"byte_end":28471,"line_start":782,"line_end":782,"column_start":21,"column_end":25},"alias_span":null,"name":"Char","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1375},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28473,"byte_end":28482,"line_start":782,"line_end":782,"column_start":27,"column_end":36},"alias_span":null,"name":"CharInput","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28484,"byte_end":28489,"line_start":782,"line_end":782,"column_start":38,"column_end":43},"alias_span":null,"name":"Input","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28491,"byte_end":28498,"line_start":782,"line_end":782,"column_start":45,"column_end":52},"alias_span":null,"name":"InputAt","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28522,"byte_end":28537,"line_start":783,"line_end":783,"column_start":22,"column_end":37},"alias_span":null,"name":"LiteralSearcher","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28558,"byte_end":28567,"line_start":784,"line_end":784,"column_start":20,"column_end":29},"alias_span":null,"name":"EmptyLook","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1483},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28569,"byte_end":28573,"line_start":784,"line_end":784,"column_start":31,"column_end":35},"alias_span":null,"name":"Inst","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28575,"byte_end":28585,"line_start":784,"line_end":784,"column_start":37,"column_end":47},"alias_span":null,"name":"InstRanges","value":"","parent":{"krate":0,"index":1104}},{"kind":"Use","ref_id":{"krate":0,"index":1465},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28587,"byte_end":28594,"line_start":784,"line_end":784,"column_start":49,"column_end":56},"alias_span":null,"name":"Program","value":"","parent":{"krate":0,"index":1104}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":0,"byte_end":28598,"line_start":1,"line_end":785,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":33},{"krate":0,"index":38},{"krate":0,"index":67},{"krate":0,"index":89},{"krate":0,"index":209},{"krate":0,"index":218},{"krate":0,"index":340},{"krate":0,"index":362},{"krate":0,"index":366},{"krate":0,"index":467},{"krate":0,"index":482},{"krate":0,"index":510},{"krate":0,"index":554},{"krate":0,"index":559},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":845},{"krate":0,"index":1072},{"krate":0,"index":1091},{"krate":0,"index":1104}],"decl_id":null,"docs":"This crate provides a library for parsing, compiling, and executing regular\nexpressions. Its syntax is similar to Perl-style regular expressions, but lacks\na few features like look around and backreferences. In exchange, all searches\nexecute in linear time with respect to the size of the regular expression and\nsearch text.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":23179,"byte_end":23201,"line_start":615,"line_end":615,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27668,"byte_end":27673,"line_start":742,"line_end":742,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"decl_id":null,"docs":"Match regular expressions on arbitrary bytes.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":27636,"byte_end":27659,"line_start":741,"line_end":741,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43003,"byte_end":43011,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Compiler","qualname":"::compile::Compiler","value":"Compiler {  }","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"decl_id":null,"docs":" A compiler translates a regular expression AST to a sequence of\n instructions. The sequence of instructions represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43422,"byte_end":43425,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Compiler>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new regular expression compiler.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":44020,"byte_end":44030,"line_start":58,"line_end":58,"column_start":12,"column_end":22},"name":"size_limit","qualname":"<Compiler>::size_limit","value":"fn (mut self, size_limit: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The size of the resulting program is limited by size_limit. If\n the program approximately exceeds the given size (in bytes), then\n compilation will stop and return an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":44775,"byte_end":44780,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Compiler>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" If bytes is true, then the program is compiled as a byte based\n automaton, which incorporates UTF-8 decoding into the machine. If it's\n false, then the automaton is Unicode scalar value based, e.g., an\n engine utilizing such an automaton is responsible for UTF-8 decoding.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":45063,"byte_end":45072,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Compiler>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":45555,"byte_end":45558,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"dfa","qualname":"<Compiler>::dfa","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for use in the DFA matching\n engine.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":45793,"byte_end":45800,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Compiler>::reverse","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set, the machine returned is suitable for matching text in\n reverse. In particular, all concatenations are flipped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":46154,"byte_end":46161,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"compile","qualname":"<Compiler>::compile","value":"fn (mut self, exprs: &[Hir]) -> result::Result<Program, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compile a regular expression given its AST.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1262},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":82671,"byte_end":82677,"line_start":8,"line_end":8,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(String)","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" A syntax error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":82797,"byte_end":82811,"line_start":11,"line_end":11,"column_start":5,"column_end":19},"name":"CompiledTooBig","qualname":"::error::Error::CompiledTooBig","value":"Error::CompiledTooBig(usize)","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" The compiled program exceeded the set size limit.\n The argument is the size limit imposed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1268},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":83098,"byte_end":83113,"line_start":18,"line_end":18,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":1261},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1261},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":82635,"byte_end":82640,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, CompiledTooBig, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1268}],"decl_id":null,"docs":" An error that occurred during parsing or compiling a regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":85649,"byte_end":85653,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exec","qualname":"::exec::Exec","value":"Exec {  }","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" `Exec` manages the execution of a regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1275},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":86013,"byte_end":86023,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"ExecNoSync","qualname":"::exec::ExecNoSync","value":"ExecNoSync {  }","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"decl_id":null,"docs":" `ExecNoSync` is like `Exec`, except it embeds a reference to a cache. This\n means it is no longer Sync, but we can now avoid the overhead of\n synchronization to fetch the cache.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":249},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":86275,"byte_end":86288,"line_start":52,"line_end":52,"column_start":12,"column_end":25},"name":"ExecNoSyncStr","qualname":"::exec::ExecNoSyncStr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ExecNoSyncStr` is like `ExecNoSync`, but matches on &str instead of &[u8].\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":88562,"byte_end":88573,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"ExecBuilder","qualname":"::exec::ExecBuilder","value":"ExecBuilder {  }","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257}],"decl_id":null,"docs":" Facilitates the construction of an executor by exposing various knobs\n to control how a regex is executed and what kinds of resources it's\n permitted to use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":89174,"byte_end":89177,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecBuilder>::new","value":"fn (re: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":89503,"byte_end":89511,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"new_many","qualname":"<ExecBuilder>::new_many","value":"fn <I, S> (res: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Like new, but compiles the union of the given regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":89826,"byte_end":89837,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_options","qualname":"<ExecBuilder>::new_options","value":"fn (opts: RegexOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a regex execution builder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":90335,"byte_end":90344,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"automatic","qualname":"<ExecBuilder>::automatic","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the matching engine to be automatically determined.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":90659,"byte_end":90662,"line_start":168,"line_end":168,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ExecBuilder>::nfa","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use the NFA algorithm no matter what\n optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":91153,"byte_end":91173,"line_start":181,"line_end":181,"column_start":12,"column_end":32},"name":"bounded_backtracking","qualname":"<ExecBuilder>::bounded_backtracking","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the matching engine to use a bounded backtracking engine no\n matter what optimizations are possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":91741,"byte_end":91746,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"bytes","qualname":"<ExecBuilder>::bytes","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compiles byte based programs for use with the NFA matching engines.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":92017,"byte_end":92026,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<ExecBuilder>::only_utf8","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When disabled, the program compiled may match arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":92149,"byte_end":92156,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ExecBuilder>::unicode","value":"fn (mut self, yes: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the Unicode flag.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":95381,"byte_end":95386,"line_start":286,"line_end":286,"column_start":12,"column_end":17},"name":"build","qualname":"<ExecBuilder>::build","value":"fn (self) -> Result<Exec, Error>","parent":null,"children":[],"decl_id":null,"docs":" Build an executor that can run a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":124362,"byte_end":124377,"line_start":1140,"line_end":1140,"column_start":12,"column_end":27},"name":"many_matches_at","qualname":"<ExecNoSync>::many_matches_at","value":"fn (&self, matches: &mut [bool], text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds which regular expressions match the given text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127484,"byte_end":127500,"line_start":1239,"line_end":1239,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSync>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127629,"byte_end":127645,"line_start":1245,"line_end":1245,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<ExecNoSyncStr>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127850,"byte_end":127858,"line_start":1253,"line_end":1253,"column_start":12,"column_end":20},"name":"searcher","qualname":"<Exec>::searcher","value":"fn (&self) -> ExecNoSync","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":128245,"byte_end":128257,"line_start":1263,"line_end":1263,"column_start":12,"column_end":24},"name":"searcher_str","qualname":"<Exec>::searcher_str","value":"fn (&self) -> ExecNoSyncStr","parent":null,"children":[],"decl_id":null,"docs":" Get a searcher that isn't Sync and can match on &str.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":128383,"byte_end":128393,"line_start":1268,"line_end":1268,"column_start":12,"column_end":22},"name":"into_regex","qualname":"<Exec>::into_regex","value":"fn (self) -> re_unicode::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":128524,"byte_end":128538,"line_start":1273,"line_end":1273,"column_start":12,"column_end":26},"name":"into_regex_set","qualname":"<Exec>::into_regex_set","value":"fn (self) -> re_set::unicode::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":128713,"byte_end":128728,"line_start":1278,"line_end":1278,"column_start":12,"column_end":27},"name":"into_byte_regex","qualname":"<Exec>::into_byte_regex","value":"fn (self) -> re_bytes::Regex","parent":null,"children":[],"decl_id":null,"docs":" Build a Regex from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":128886,"byte_end":128905,"line_start":1283,"line_end":1283,"column_start":12,"column_end":31},"name":"into_byte_regex_set","qualname":"<Exec>::into_byte_regex_set","value":"fn (self) -> re_set::bytes::RegexSet","parent":null,"children":[],"decl_id":null,"docs":" Build a RegexSet from this executor that can match arbitrary bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129092,"byte_end":129105,"line_start":1289,"line_end":1289,"column_start":12,"column_end":25},"name":"regex_strings","qualname":"<Exec>::regex_strings","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" The original regular expressions given by the caller that were\n compiled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129262,"byte_end":129275,"line_start":1296,"line_end":1296,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Exec>::capture_names","value":"fn (&self) -> &[Option<String>]","parent":null,"children":[],"decl_id":null,"docs":" Return a slice of capture names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129450,"byte_end":129466,"line_start":1302,"line_end":1302,"column_start":12,"column_end":28},"name":"capture_name_idx","qualname":"<Exec>::capture_name_idx","value":"fn (&self) -> &Arc<HashMap<String, usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to named groups mapping (from group name to\n group position).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1365},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148122,"byte_end":148129,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"InputAt","qualname":"::input::InputAt","value":"InputAt {  }","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369}],"decl_id":null,"docs":" Represents a location in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148301,"byte_end":148309,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"is_start","qualname":"<InputAt>::is_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is at the beginning of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148436,"byte_end":148442,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"is_end","qualname":"<InputAt>::is_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff this position is past the end of the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148688,"byte_end":148692,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"char","qualname":"<InputAt>::char","value":"fn (&self) -> Char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character at this position.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148786,"byte_end":148790,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"byte","qualname":"<InputAt>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148917,"byte_end":148920,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"len","qualname":"<InputAt>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the UTF-8 width of the character at this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149065,"byte_end":149073,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<InputAt>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the UTF-8 width of the character at this position\n is zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149181,"byte_end":149184,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"pos","qualname":"<InputAt>::pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of this position.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149305,"byte_end":149313,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"next_pos","qualname":"<InputAt>::next_pos","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte offset of the next position in the input.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":387},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149439,"byte_end":149444,"line_start":69,"line_end":69,"column_start":11,"column_end":16},"name":"Input","qualname":"::input::Input","value":"Input: fmt::Debug","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395}],"decl_id":null,"docs":" An abstraction over input used in the matching engines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149529,"byte_end":149531,"line_start":71,"line_end":71,"column_start":8,"column_end":10},"name":"at","qualname":"::input::Input::at","value":"fn (&self, i: usize) -> InputAt","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Return an encoding of the position at byte offset `i`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149708,"byte_end":149717,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"next_char","qualname":"::input::Input::next_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring next to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149898,"byte_end":149911,"line_start":81,"line_end":81,"column_start":8,"column_end":21},"name":"previous_char","qualname":"::input::Input::previous_char","value":"fn (&self, at: InputAt) -> Char","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Return the Unicode character occurring previous to `at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":150051,"byte_end":150065,"line_start":85,"line_end":85,"column_start":8,"column_end":22},"name":"is_empty_match","qualname":"::input::Input::is_empty_match","value":"fn (&self, at: InputAt, empty: &InstEmptyLook) -> bool","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Return true if the given empty width instruction matches at the\n input position given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":150172,"byte_end":150181,"line_start":88,"line_end":88,"column_start":8,"column_end":17},"name":"prefix_at","qualname":"::input::Input::prefix_at","value":"fn (&self, prefixes: &LiteralSearcher, at: InputAt) -> Option<InputAt>","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Scan the input for a matching prefix.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":150331,"byte_end":150334,"line_start":95,"line_end":95,"column_start":8,"column_end":11},"name":"len","qualname":"::input::Input::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" The number of bytes in the input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":150396,"byte_end":150404,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::input::Input::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Whether the input is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":150515,"byte_end":150523,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::input::Input::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":" Return the given input as a sequence of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1375},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151327,"byte_end":151336,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"CharInput","qualname":"::input::CharInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" An input reader over characters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151455,"byte_end":151458,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<CharInput>::new","value":"fn (s: &'t [u8]) -> CharInput<'t>","parent":null,"children":[],"decl_id":null,"docs":" Return a new character input reader for the given string.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1399},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157606,"byte_end":157610,"line_start":348,"line_end":348,"column_start":12,"column_end":16},"name":"Char","qualname":"::input::Char","value":"","parent":null,"children":[],"decl_id":null,"docs":" An inline representation of `Option<char>`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157934,"byte_end":157941,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Char>::is_none","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is absent.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157913,"byte_end":157922,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":158145,"byte_end":158153,"line_start":370,"line_end":370,"column_start":12,"column_end":20},"name":"len_utf8","qualname":"<Char>::len_utf8","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the character's UTF-8 encoding.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":158124,"byte_end":158133,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":158376,"byte_end":158388,"line_start":377,"line_end":377,"column_start":12,"column_end":24},"name":"is_word_char","qualname":"<Char>::is_word_char","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the character is a word character.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":158882,"byte_end":158894,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"is_word_byte","qualname":"<Char>::is_word_byte","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true iff the byte is a word byte.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160100,"byte_end":160115,"line_start":12,"line_end":12,"column_start":16,"column_end":31},"name":"LiteralSearcher","qualname":"::literal::imp::LiteralSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160164,"byte_end":160169,"line_start":15,"line_end":15,"column_start":16,"column_end":21},"name":"empty","qualname":"<LiteralSearcher>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160240,"byte_end":160248,"line_start":19,"line_end":19,"column_start":16,"column_end":24},"name":"prefixes","qualname":"<LiteralSearcher>::prefixes","value":"fn (_: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160330,"byte_end":160338,"line_start":23,"line_end":23,"column_start":16,"column_end":24},"name":"suffixes","qualname":"<LiteralSearcher>::suffixes","value":"fn (_: Literals) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160420,"byte_end":160428,"line_start":27,"line_end":27,"column_start":16,"column_end":24},"name":"complete","qualname":"<LiteralSearcher>::complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160490,"byte_end":160494,"line_start":31,"line_end":31,"column_start":16,"column_end":20},"name":"find","qualname":"<LiteralSearcher>::find","value":"fn (&self, _: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160593,"byte_end":160603,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"name":"find_start","qualname":"<LiteralSearcher>::find_start","value":"fn (&self, _: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160702,"byte_end":160710,"line_start":39,"line_end":39,"column_start":16,"column_end":24},"name":"find_end","qualname":"<LiteralSearcher>::find_end","value":"fn (&self, _: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160809,"byte_end":160817,"line_start":43,"line_end":43,"column_start":16,"column_end":24},"name":"is_empty","qualname":"<LiteralSearcher>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160878,"byte_end":160881,"line_start":47,"line_end":47,"column_start":16,"column_end":19},"name":"len","qualname":"<LiteralSearcher>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160940,"byte_end":160956,"line_start":51,"line_end":51,"column_start":16,"column_end":32},"name":"approximate_size","qualname":"<LiteralSearcher>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1465},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":174066,"byte_end":174073,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Program","qualname":"::prog::Program","value":"Program { insts, matches, captures, capture_name_idx, start, byte_classes, only_utf8, is_bytes, is_dfa, is_reverse, is_anchored_start, is_anchored_end, has_unicode_word_boundary, prefixes, dfa_size_limit }","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480}],"decl_id":null,"docs":" Program is a sequence of instructions and various facts about thos\n instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1466},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":174143,"byte_end":174148,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"insts","qualname":"::prog::Program::insts","value":"std::vec::Vec<prog::Inst>","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" A sequence of instructions that represents an NFA.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1467},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":174313,"byte_end":174320,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"matches","qualname":"::prog::Program::matches","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" Pointers to each Match instruction in the sequence.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1468},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":174454,"byte_end":174462,"line_start":27,"line_end":27,"column_start":9,"column_end":17},"name":"captures","qualname":"::prog::Program::captures","value":"std::vec::Vec<std::option::Option<std::string::String>>","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" The ordered sequence of all capture groups extracted from the AST.\n Unnamed groups are `None`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1469},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":174555,"byte_end":174571,"line_start":29,"line_end":29,"column_start":9,"column_end":25},"name":"capture_name_idx","qualname":"::prog::Program::capture_name_idx","value":"std::sync::Arc<std::collections::HashMap<std::string::String, usize>>","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" Pointers to all named capture groups into `captures`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1470},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":174928,"byte_end":174933,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::Program::start","value":"usize","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" A pointer to the start instruction. This can vary depending on how\n the program was compiled. For example, programs for use with the DFA\n engine have a `.*?` inserted at the beginning of unanchored regular\n expressions. The actual starting point of the program is after the\n `.*?`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175047,"byte_end":175059,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"byte_classes","qualname":"::prog::Program::byte_classes","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" A set of equivalence classes for discriminating bytes in the compiled\n program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175138,"byte_end":175147,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"name":"only_utf8","qualname":"::prog::Program::only_utf8","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" When true, this program can only match valid UTF-8.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1473},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175271,"byte_end":175279,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"is_bytes","qualname":"::prog::Program::is_bytes","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" When true, this program uses byte range instructions instead of Unicode\n range instructions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1474},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175468,"byte_end":175474,"line_start":47,"line_end":47,"column_start":9,"column_end":15},"name":"is_dfa","qualname":"::prog::Program::is_dfa","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" When true, the program is compiled for DFA matching. For example, this\n implies `is_bytes` and also inserts a preceding `.*?` for unanchored\n regexes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1475},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175580,"byte_end":175590,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"is_reverse","qualname":"::prog::Program::is_reverse","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" When true, the program matches text in reverse (for use only in the\n DFA).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175672,"byte_end":175689,"line_start":52,"line_end":52,"column_start":9,"column_end":26},"name":"is_anchored_start","qualname":"::prog::Program::is_anchored_start","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" Whether the regex must match from the start of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175767,"byte_end":175782,"line_start":54,"line_end":54,"column_start":9,"column_end":24},"name":"is_anchored_end","qualname":"::prog::Program::is_anchored_end","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" Whether the regex must match at the end of the input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175873,"byte_end":175898,"line_start":56,"line_end":56,"column_start":9,"column_end":34},"name":"has_unicode_word_boundary","qualname":"::prog::Program::has_unicode_word_boundary","value":"bool","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" Whether this program contains a Unicode word boundary instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1479},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":175990,"byte_end":175998,"line_start":58,"line_end":58,"column_start":9,"column_end":17},"name":"prefixes","qualname":"::prog::Program::prefixes","value":"literal::imp::LiteralSearcher","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" A possibly empty machine for very quickly matching prefix literals.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":176825,"byte_end":176839,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::prog::Program::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1465},"children":[],"decl_id":null,"docs":" A limit on the size of the cache that the DFA is allowed to use while\n matching.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":176965,"byte_end":176968,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<Program>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty instruction sequence. Fields are given default\n values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":177685,"byte_end":177689,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"skip","qualname":"<Program>::skip","value":"fn (&self, mut pc: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If pc is an index to a no-op instruction (like Save), then return the\n next pc that is not a no-op instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":178003,"byte_end":178017,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"leads_to_match","qualname":"<Program>::leads_to_match","value":"fn (&self, pc: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if an execution engine at instruction `pc` will\n always lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":178543,"byte_end":178556,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"needs_dotstar","qualname":"<Program>::needs_dotstar","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the current configuration demands that an implicit\n `.*?` be prepended to the instruction sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":178763,"byte_end":178773,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"uses_bytes","qualname":"<Program>::uses_bytes","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program uses Byte instructions instead of\n Char/Range instructions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":179008,"byte_end":179017,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"only_utf8","qualname":"<Program>::only_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this program exclusively matches valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":179165,"byte_end":179181,"line_start":147,"line_end":147,"column_start":12,"column_end":28},"name":"approximate_size","qualname":"<Program>::approximate_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the approximate heap usage of this instruction sequence in\n bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":184124,"byte_end":184129,"line_start":276,"line_end":276,"column_start":5,"column_end":10},"name":"Match","qualname":"::prog::Inst::Match","value":"Inst::Match(usize)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Match indicates that the program has reached a match state.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1487},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":184259,"byte_end":184263,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Save","qualname":"::prog::Inst::Save","value":"Inst::Save(InstSave)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Save causes the program to save the current location of the input in\n the slot indicated by InstSave.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":184398,"byte_end":184403,"line_start":282,"line_end":282,"column_start":5,"column_end":10},"name":"Split","qualname":"::prog::Inst::Split","value":"Inst::Split(InstSplit)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Split causes the program to diverge to one of two paths in the\n program, preferring goto1 in InstSplit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1493},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":184563,"byte_end":184572,"line_start":285,"line_end":285,"column_start":5,"column_end":14},"name":"EmptyLook","qualname":"::prog::Inst::EmptyLook","value":"Inst::EmptyLook(InstEmptyLook)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" EmptyLook represents a zero-width assertion in a regex program. A\n zero-width assertion does not consume any of the input text.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1496},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":184714,"byte_end":184718,"line_start":288,"line_end":288,"column_start":5,"column_end":9},"name":"Char","qualname":"::prog::Inst::Char","value":"Inst::Char(InstChar)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Char requires the regex program to match the character in InstChar at\n the current position in the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1499},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":184892,"byte_end":184898,"line_start":291,"line_end":291,"column_start":5,"column_end":11},"name":"Ranges","qualname":"::prog::Inst::Ranges","value":"Inst::Ranges(InstRanges)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Ranges requires the regex program to match the character at the current\n position in the input with one of the ranges specified in InstRanges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185096,"byte_end":185101,"line_start":295,"line_end":295,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::prog::Inst::Bytes","value":"Inst::Bytes(InstBytes)","parent":{"krate":0,"index":1483},"children":[],"decl_id":null,"docs":" Bytes is like Ranges, except it expresses a single byte range. It is\n used in conjunction with Split instructions to implement multi-byte\n character classes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1483},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":183695,"byte_end":183699,"line_start":268,"line_end":268,"column_start":10,"column_end":14},"name":"Inst","qualname":"::prog::Inst","value":"Inst::{Match, Save, Split, EmptyLook, Char, Ranges, Bytes}","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1487},{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":1499},{"krate":0,"index":1502}],"decl_id":null,"docs":" Inst is an instruction code in a Regex program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185205,"byte_end":185213,"line_start":300,"line_end":300,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Inst>::is_match","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this is a match instruction.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185411,"byte_end":185419,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"InstSave","qualname":"::prog::InstSave","value":"InstSave { goto, slot }","parent":null,"children":[{"krate":0,"index":1510},{"krate":0,"index":1511}],"decl_id":null,"docs":" Representation of the Save instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1510},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185483,"byte_end":185487,"line_start":312,"line_end":312,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstSave::goto","value":"usize","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" The next location to execute in the program.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1511},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185642,"byte_end":185646,"line_start":315,"line_end":315,"column_start":9,"column_end":13},"name":"slot","qualname":"::prog::InstSave::slot","value":"usize","parent":{"krate":0,"index":1509},"children":[],"decl_id":null,"docs":" The capture slot (there are two slots for every capture in a regex,\n including the zeroth capture for the entire match).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1516},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185738,"byte_end":185747,"line_start":320,"line_end":320,"column_start":12,"column_end":21},"name":"InstSplit","qualname":"::prog::InstSplit","value":"InstSplit { goto1, goto2 }","parent":null,"children":[{"krate":0,"index":1517},{"krate":0,"index":1518}],"decl_id":null,"docs":" Representation of the Split instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1517},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185903,"byte_end":185908,"line_start":323,"line_end":323,"column_start":9,"column_end":14},"name":"goto1","qualname":"::prog::InstSplit::goto1","value":"usize","parent":{"krate":0,"index":1516},"children":[],"decl_id":null,"docs":" The first instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186073,"byte_end":186078,"line_start":326,"line_end":326,"column_start":9,"column_end":14},"name":"goto2","qualname":"::prog::InstSplit::goto2","value":"usize","parent":{"krate":0,"index":1516},"children":[],"decl_id":null,"docs":" The second instruction to try. A match resulting from following goto1\n has precedence over a match resulting from following goto2.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186178,"byte_end":186191,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"InstEmptyLook","qualname":"::prog::InstEmptyLook","value":"InstEmptyLook { goto, look }","parent":null,"children":[{"krate":0,"index":1524},{"krate":0,"index":1525}],"decl_id":null,"docs":" Representation of the `EmptyLook` instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1524},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186292,"byte_end":186296,"line_start":334,"line_end":334,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstEmptyLook::goto","value":"usize","parent":{"krate":0,"index":1523},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1525},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186366,"byte_end":186370,"line_start":336,"line_end":336,"column_start":9,"column_end":13},"name":"look","qualname":"::prog::InstEmptyLook::look","value":"prog::EmptyLook","parent":{"krate":0,"index":1523},"children":[],"decl_id":null,"docs":" The type of zero-width assertion to check.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186534,"byte_end":186543,"line_start":343,"line_end":343,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::prog::EmptyLook::StartLine","value":"EmptyLook::StartLine","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" Start of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1533},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186579,"byte_end":186586,"line_start":345,"line_end":345,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::prog::EmptyLook::EndLine","value":"EmptyLook::EndLine","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" End of line or input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186616,"byte_end":186625,"line_start":347,"line_end":347,"column_start":5,"column_end":14},"name":"StartText","qualname":"::prog::EmptyLook::StartText","value":"EmptyLook::StartText","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" Start of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186653,"byte_end":186660,"line_start":349,"line_end":349,"column_start":5,"column_end":12},"name":"EndText","qualname":"::prog::EmptyLook::EndText","value":"EmptyLook::EndText","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" End of input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186734,"byte_end":186746,"line_start":351,"line_end":351,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::prog::EmptyLook::WordBoundary","value":"EmptyLook::WordBoundary","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" Word character on one side and non-word character on other.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186826,"byte_end":186841,"line_start":353,"line_end":353,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::prog::EmptyLook::NotWordBoundary","value":"EmptyLook::NotWordBoundary","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" Word character on both sides or non-word character on both sides.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1543},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186876,"byte_end":186893,"line_start":355,"line_end":355,"column_start":5,"column_end":22},"name":"WordBoundaryAscii","qualname":"::prog::EmptyLook::WordBoundaryAscii","value":"EmptyLook::WordBoundaryAscii","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1545},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186932,"byte_end":186952,"line_start":357,"line_end":357,"column_start":5,"column_end":25},"name":"NotWordBoundaryAscii","qualname":"::prog::EmptyLook::NotWordBoundaryAscii","value":"EmptyLook::NotWordBoundaryAscii","parent":{"krate":0,"index":1530},"children":[],"decl_id":null,"docs":" Not ASCII word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":186486,"byte_end":186495,"line_start":341,"line_end":341,"column_start":10,"column_end":19},"name":"EmptyLook","qualname":"::prog::EmptyLook","value":"EmptyLook::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary, WordBoundaryAscii, NotWordBoundaryAscii}","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1543},{"krate":0,"index":1545}],"decl_id":null,"docs":" The set of zero-width match instructions.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187036,"byte_end":187044,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"InstChar","qualname":"::prog::InstChar","value":"InstChar { goto, c }","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1558}],"decl_id":null,"docs":" Representation of the Char instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1557},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187145,"byte_end":187149,"line_start":365,"line_end":365,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstChar::goto","value":"usize","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1558},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187199,"byte_end":187200,"line_start":367,"line_end":367,"column_start":9,"column_end":10},"name":"c","qualname":"::prog::InstChar::c","value":"char","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" The character to test.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187292,"byte_end":187302,"line_start":372,"line_end":372,"column_start":12,"column_end":22},"name":"InstRanges","qualname":"::prog::InstRanges","value":"InstRanges { goto, ranges }","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1565}],"decl_id":null,"docs":" Representation of the Ranges instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1564},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187403,"byte_end":187407,"line_start":375,"line_end":375,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstRanges::goto","value":"usize","parent":{"krate":0,"index":1563},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187482,"byte_end":187488,"line_start":377,"line_end":377,"column_start":9,"column_end":15},"name":"ranges","qualname":"::prog::InstRanges::ranges","value":"std::vec::Vec<(char, char)>","parent":{"krate":0,"index":1563},"children":[],"decl_id":null,"docs":" The set of Unicode scalar value ranges to test.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187615,"byte_end":187622,"line_start":382,"line_end":382,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstRanges>::matches","value":"fn (&self, c: Char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given input character matches this instruction.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188466,"byte_end":188475,"line_start":409,"line_end":409,"column_start":12,"column_end":21},"name":"num_chars","qualname":"<InstRanges>::num_chars","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of distinct characters represented by all of the\n ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188731,"byte_end":188740,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"InstBytes","qualname":"::prog::InstBytes","value":"InstBytes { goto, start, end }","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573}],"decl_id":null,"docs":" Representation of the Bytes instruction.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188841,"byte_end":188845,"line_start":422,"line_end":422,"column_start":9,"column_end":13},"name":"goto","qualname":"::prog::InstBytes::goto","value":"usize","parent":{"krate":0,"index":1570},"children":[],"decl_id":null,"docs":" The next location to execute in the program if this instruction\n succeeds.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188914,"byte_end":188919,"line_start":424,"line_end":424,"column_start":9,"column_end":14},"name":"start","qualname":"::prog::InstBytes::start","value":"u8","parent":{"krate":0,"index":1570},"children":[],"decl_id":null,"docs":" The start (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188981,"byte_end":188984,"line_start":426,"line_end":426,"column_start":9,"column_end":12},"name":"end","qualname":"::prog::InstBytes::end","value":"u8","parent":{"krate":0,"index":1570},"children":[],"decl_id":null,"docs":" The end (inclusive) of this byte range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":189090,"byte_end":189097,"line_start":431,"line_end":431,"column_start":12,"column_end":19},"name":"matches","qualname":"<InstBytes>::matches","value":"fn (&self, byte: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189316,"byte_end":189328,"line_start":4,"line_end":4,"column_start":12,"column_end":24},"name":"RegexOptions","qualname":"::re_builder::RegexOptions","value":"RegexOptions { pats, size_limit, dfa_size_limit, nest_limit, case_insensitive, multi_line, dot_matches_new_line, swap_greed, ignore_whitespace, unicode, octal }","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589}],"decl_id":null,"docs":" The set of user configurable options for compiling zero or more regexes.\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189282,"byte_end":189304,"line_start":3,"line_end":3,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189339,"byte_end":189343,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"pats","qualname":"::re_builder::RegexOptions::pats","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189366,"byte_end":189376,"line_start":6,"line_end":6,"column_start":9,"column_end":19},"name":"size_limit","qualname":"::re_builder::RegexOptions::size_limit","value":"usize","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189393,"byte_end":189407,"line_start":7,"line_end":7,"column_start":9,"column_end":23},"name":"dfa_size_limit","qualname":"::re_builder::RegexOptions::dfa_size_limit","value":"usize","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189424,"byte_end":189434,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"name":"nest_limit","qualname":"::re_builder::RegexOptions::nest_limit","value":"u32","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1583},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189449,"byte_end":189465,"line_start":9,"line_end":9,"column_start":9,"column_end":25},"name":"case_insensitive","qualname":"::re_builder::RegexOptions::case_insensitive","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1584},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189481,"byte_end":189491,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"name":"multi_line","qualname":"::re_builder::RegexOptions::multi_line","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189507,"byte_end":189527,"line_start":11,"line_end":11,"column_start":9,"column_end":29},"name":"dot_matches_new_line","qualname":"::re_builder::RegexOptions::dot_matches_new_line","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189543,"byte_end":189553,"line_start":12,"line_end":12,"column_start":9,"column_end":19},"name":"swap_greed","qualname":"::re_builder::RegexOptions::swap_greed","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1587},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189569,"byte_end":189586,"line_start":13,"line_end":13,"column_start":9,"column_end":26},"name":"ignore_whitespace","qualname":"::re_builder::RegexOptions::ignore_whitespace","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189602,"byte_end":189609,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"unicode","qualname":"::re_builder::RegexOptions::unicode","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1589},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189625,"byte_end":189630,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"octal","qualname":"::re_builder::RegexOptions::octal","value":"bool","parent":{"krate":0,"index":1578},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1682},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208556,"byte_end":208561,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_bytes::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208742,"byte_end":208747,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208721,"byte_end":208730,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208886,"byte_end":208889,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208865,"byte_end":208874,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208991,"byte_end":208999,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Match>::as_bytes","value":"fn (&self) -> &'t [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208970,"byte_end":208979,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1702},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":209968,"byte_end":209973,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_bytes::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching arbitrary bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":211032,"byte_end":211035,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":211766,"byte_end":211774,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":212636,"byte_end":212640,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":213356,"byte_end":213365,"line_start":173,"line_end":173,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":216502,"byte_end":216510,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t [u8]) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":217955,"byte_end":217968,"line_start":275,"line_end":275,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":218886,"byte_end":218891,"line_start":302,"line_end":302,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t [u8]) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":219874,"byte_end":219880,"line_start":326,"line_end":326,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t [u8], limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":224630,"byte_end":224637,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided. The\n replacement can be a regular byte string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":225094,"byte_end":225105,"line_start":456,"line_end":456,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t [u8], rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":225574,"byte_end":225582,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t [u8], limit: usize, mut rep: R) -> Cow<'t, [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":228059,"byte_end":228073,"line_start":541,"line_end":541,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":228461,"byte_end":228478,"line_start":551,"line_end":551,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":228922,"byte_end":228933,"line_start":565,"line_end":565,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":229330,"byte_end":229337,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":230011,"byte_end":230024,"line_start":596,"line_end":596,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8]) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":230531,"byte_end":230547,"line_start":610,"line_end":610,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `captures_read`, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231092,"byte_end":231108,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t [u8], start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231397,"byte_end":231403,"line_start":641,"line_end":641,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231526,"byte_end":231539,"line_start":646,"line_end":646,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231675,"byte_end":231687,"line_start":651,"line_end":651,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231898,"byte_end":231915,"line_start":657,"line_end":657,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":232262,"byte_end":232271,"line_start":666,"line_end":666,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":641},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":232761,"byte_end":232768,"line_start":679,"line_end":679,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_bytes::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":652},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":233341,"byte_end":233355,"line_start":697,"line_end":697,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_bytes::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":663},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":233943,"byte_end":233948,"line_start":717,"line_end":717,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_bytes::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":673},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":234931,"byte_end":234937,"line_start":752,"line_end":752,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_bytes::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":676},{"krate":0,"index":677}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":235633,"byte_end":235645,"line_start":780,"line_end":780,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_bytes::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1707},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":236806,"byte_end":236822,"line_start":813,"line_end":813,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_bytes::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":694},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237144,"byte_end":237153,"line_start":821,"line_end":821,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_bytes::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237511,"byte_end":237514,"line_start":829,"line_end":829,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237490,"byte_end":237499,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237809,"byte_end":237812,"line_start":838,"line_end":838,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237788,"byte_end":237797,"line_start":837,"line_end":837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":238172,"byte_end":238175,"line_start":849,"line_end":849,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":238151,"byte_end":238160,"line_start":848,"line_end":848,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":699},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":238809,"byte_end":238817,"line_start":865,"line_end":865,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_bytes::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703}],"decl_id":null,"docs":" Captures represents a group of captured byte strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":239752,"byte_end":239755,"line_start":891,"line_end":891,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":240040,"byte_end":240044,"line_start":897,"line_end":897,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":240476,"byte_end":240480,"line_start":906,"line_end":906,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":241491,"byte_end":241497,"line_start":926,"line_end":926,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &[u8], dst: &mut Vec<u8>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":241808,"byte_end":241811,"line_start":935,"line_end":935,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":241787,"byte_end":241796,"line_start":934,"line_end":934,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":745},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":244967,"byte_end":244984,"line_start":1034,"line_end":1034,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_bytes::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":757},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":245690,"byte_end":245698,"line_start":1056,"line_end":1056,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_bytes::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a byte\n string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":245984,"byte_end":245998,"line_start":1064,"line_end":1064,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_bytes::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut Vec<u8>) -> ()","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":246409,"byte_end":246421,"line_start":1073,"line_end":1073,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_bytes::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, [u8]>>","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement byte string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":247152,"byte_end":247158,"line_start":1098,"line_end":1098,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_bytes::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":757},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1714},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":247386,"byte_end":247397,"line_start":1107,"line_end":1107,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_bytes::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":777},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":248694,"byte_end":248702,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_bytes::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal byte string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1873},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":264551,"byte_end":264560,"line_start":12,"line_end":12,"column_start":12,"column_end":21},"name":"Locations","qualname":"::re_trait::Locations","value":"","parent":null,"children":[],"decl_id":null,"docs":" Locations represents the offsets of each capturing group in a regex for\n a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":264889,"byte_end":264892,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"pos","qualname":"<Locations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":265336,"byte_end":265340,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"iter","qualname":"<Locations>::iter","value":"fn (&self) -> SubCapturesPosIter","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator of all the capture group positions in order of\n appearance in the regular expression. Positions are byte indices\n in terms of the original string matched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":265635,"byte_end":265638,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"len","qualname":"<Locations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":794},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":266051,"byte_end":266069,"line_start":54,"line_end":54,"column_start":12,"column_end":30},"name":"SubCapturesPosIter","qualname":"::re_trait::SubCapturesPosIter","value":"SubCapturesPosIter {  }","parent":null,"children":[{"krate":0,"index":796},{"krate":0,"index":797}],"decl_id":null,"docs":" An iterator over capture group positions for a particular match of a\n regular expression.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":802},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":267241,"byte_end":267258,"line_start":87,"line_end":87,"column_start":11,"column_end":28},"name":"RegularExpression","qualname":"::re_trait::RegularExpression","value":"RegularExpression: Sized","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812}],"decl_id":null,"docs":" `RegularExpression` describes types that can implement regex searching.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":803},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":267311,"byte_end":267315,"line_start":89,"line_end":89,"column_start":10,"column_end":14},"name":"Text","qualname":"::re_trait::RegularExpression::Text","value":"type Text: ?Sized;","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" The type of the haystack.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":267490,"byte_end":267499,"line_start":93,"line_end":93,"column_start":8,"column_end":17},"name":"slots_len","qualname":"::re_trait::RegularExpression::slots_len","value":"fn (&self) -> usize","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" The number of capture slots in the compiled regular expression. This is\n always two times the number of capture groups (two slots per group).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":267595,"byte_end":267604,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"locations","qualname":"::re_trait::RegularExpression::locations","value":"fn (&self) -> Locations","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Allocates fresh space for all capturing groups in this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":267950,"byte_end":267966,"line_start":105,"line_end":105,"column_start":8,"column_end":24},"name":"next_after_empty","qualname":"::re_trait::RegularExpression::next_after_empty","value":"fn (&self, text: &Self::Text, i: usize) -> usize","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns the position of the next character after `i`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":268073,"byte_end":268090,"line_start":108,"line_end":108,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::re_trait::RegularExpression::shortest_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<usize>","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns the location of the shortest match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":268246,"byte_end":268257,"line_start":115,"line_end":115,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::re_trait::RegularExpression::is_match_at","value":"fn (&self, text: &Self::Text, start: usize) -> bool","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns whether the regex matches the text given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":268380,"byte_end":268387,"line_start":118,"line_end":118,"column_start":8,"column_end":15},"name":"find_at","qualname":"::re_trait::RegularExpression::find_at","value":"fn (&self, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":268622,"byte_end":268638,"line_start":126,"line_end":126,"column_start":8,"column_end":24},"name":"captures_read_at","qualname":"::re_trait::RegularExpression::captures_read_at","value":"fn (&self, locs: &mut Locations, text: &Self::Text, start: usize) -> Option<(usize, usize)>","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns the leftmost-first match location if one exists, and also\n fills in any matching capture slot locations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":268871,"byte_end":268880,"line_start":135,"line_end":135,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::re_trait::RegularExpression::find_iter","value":"fn (self, text: &Self::Text) -> Matches<Self>","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269121,"byte_end":269134,"line_start":141,"line_end":141,"column_start":8,"column_end":21},"name":"captures_iter","qualname":"::re_trait::RegularExpression::captures_iter","value":"fn (self, text: &Self::Text) -> CaptureMatches<Self>","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping successive leftmost-first\n matches with captures.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":813},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269327,"byte_end":269334,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_trait::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819}],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269611,"byte_end":269615,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"text","qualname":"<Matches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269713,"byte_end":269718,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"regex","qualname":"<Matches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":270919,"byte_end":270933,"line_start":209,"line_end":209,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_trait::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping successive leftmost-first matches with\n captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":271143,"byte_end":271147,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"text","qualname":"<CaptureMatches>::text","value":"fn (&self) -> &'t R::Text","parent":null,"children":[],"decl_id":null,"docs":" Return the text being searched.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":271249,"byte_end":271254,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"regex","qualname":"<CaptureMatches>::regex","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying regex.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":864},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":272671,"byte_end":272677,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"escape","qualname":"::re_unicode::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1880},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":272928,"byte_end":272933,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Match","qualname":"::re_unicode::Match","value":"Match {  }","parent":null,"children":[{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884}],"decl_id":null,"docs":" Match represents a single match of a regex in a haystack.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273113,"byte_end":273118,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"start","qualname":"<Match>::start","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273092,"byte_end":273101,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273257,"byte_end":273260,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"end","qualname":"<Match>::end","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the ending byte offset of the match in the haystack.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273236,"byte_end":273245,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273362,"byte_end":273368,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Match>::as_str","value":"fn (&self) -> &'t str","parent":null,"children":[],"decl_id":null,"docs":" Returns the matched text.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273341,"byte_end":273350,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1900},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276028,"byte_end":276033,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"Regex","qualname":"::re_unicode::Regex","value":"","parent":null,"children":[],"decl_id":null,"docs":" A compiled regular expression for matching Unicode strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276975,"byte_end":276978,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<Regex>::new","value":"fn (re: &str) -> Result<Regex, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compiles a regular expression. Once compiled, it can be used repeatedly\n to search, split or replace text in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":277708,"byte_end":277716,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex>::is_match","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the regex matches the string given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":278592,"byte_end":278596,"line_start":208,"line_end":208,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex>::find","value":"fn <'t> (&self, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end byte range of the leftmost-first match in\n `text`. If no match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":279310,"byte_end":279319,"line_start":230,"line_end":230,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex>::find_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> Matches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for each successive non-overlapping match in\n `text`, returning the start and end byte indices with respect to\n `text`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":282399,"byte_end":282407,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"captures","qualname":"<Regex>::captures","value":"fn <'t> (&self, text: &'t str) -> Option<Captures<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture groups corresponding to the leftmost-first\n match in `text`. Capture group `0` always corresponds to the entire\n match. If no match is found, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":283740,"byte_end":283753,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"captures_iter","qualname":"<Regex>::captures_iter","value":"fn <'r, 't> (&'r self, text: &'t str) -> CaptureMatches<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all the non-overlapping capture groups matched\n in `text`. This is operationally the same as `find_iter`, except it\n yields information about capturing group matches.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":284612,"byte_end":284617,"line_start":356,"line_end":356,"column_start":12,"column_end":17},"name":"split","qualname":"<Regex>::split","value":"fn <'r, 't> (&'r self, text: &'t str) -> Split<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of substrings of `text` delimited by a match of the\n regular expression. Namely, each element of the iterator corresponds to\n text that *isn't* matched by the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":285572,"byte_end":285578,"line_start":380,"line_end":380,"column_start":12,"column_end":18},"name":"splitn","qualname":"<Regex>::splitn","value":"fn <'r, 't> (&'r self, text: &'t str, limit: usize) -> SplitN<'r, 't>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of `text` delimited\n by a match of the regular expression. (A `limit` of `0` will return no\n substrings.) Namely, each element of the iterator corresponds to text\n that *isn't* matched by the regular expression. The remainder of the\n string that is not split will be the last element in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":290088,"byte_end":290095,"line_start":492,"line_end":492,"column_start":12,"column_end":19},"name":"replace","qualname":"<Regex>::replace","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces the leftmost-first match with the replacement provided.\n The replacement can be a regular string (where `$N` and `$name` are\n expanded to match capture groups) or a function that takes the matches'\n `Captures` and returns the replaced string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":290552,"byte_end":290563,"line_start":506,"line_end":506,"column_start":12,"column_end":23},"name":"replace_all","qualname":"<Regex>::replace_all","value":"fn <'t, R> (&self, text: &'t str, rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces all non-overlapping matches in `text` with the replacement\n provided. This is the same as calling `replacen` with `limit` set to\n `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":291032,"byte_end":291040,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"replacen","qualname":"<Regex>::replacen","value":"fn <'t, R> (&self, text: &'t str, limit: usize, mut rep: R) -> Cow<'t, str>","parent":null,"children":[],"decl_id":null,"docs":" Replaces at most `limit` non-overlapping matches in `text` with the\n replacement provided. If `limit` is 0, then all non-overlapping matches\n are replaced.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":293998,"byte_end":294012,"line_start":600,"line_end":600,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex>::shortest_match","value":"fn (&self, text: &str) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the end location of a match in the text given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":294399,"byte_end":294416,"line_start":610,"line_end":610,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex>::shortest_match_at","value":"fn (&self, text: &str, start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as shortest_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":294863,"byte_end":294874,"line_start":624,"line_end":624,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex>::is_match_at","value":"fn (&self, text: &str, start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as is_match, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":295270,"byte_end":295277,"line_start":634,"line_end":634,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex>::find_at","value":"fn <'t> (&self, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as find, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":295954,"byte_end":295967,"line_start":655,"line_end":655,"column_start":12,"column_end":25},"name":"captures_read","qualname":"<Regex>::captures_read","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" This is like `captures`, but uses\n [`CaptureLocations`](struct.CaptureLocations.html)\n instead of\n [`Captures`](struct.Captures.html) in order to amortize allocations.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":296466,"byte_end":296482,"line_start":669,"line_end":669,"column_start":12,"column_end":28},"name":"captures_read_at","qualname":"<Regex>::captures_read_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as captures, but starts the search at the given\n offset and populates the capture locations given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297030,"byte_end":297046,"line_start":687,"line_end":687,"column_start":12,"column_end":28},"name":"read_captures_at","qualname":"<Regex>::read_captures_at","value":"fn <'t> (&self, locs: &mut CaptureLocations, text: &'t str, start: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" An undocumented alias for `captures_read_at`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297334,"byte_end":297340,"line_start":700,"line_end":700,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Regex>::as_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original string of this regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297463,"byte_end":297476,"line_start":705,"line_end":705,"column_start":12,"column_end":25},"name":"capture_names","qualname":"<Regex>::capture_names","value":"fn (&self) -> CaptureNames","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the capture names.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297612,"byte_end":297624,"line_start":710,"line_end":710,"column_start":12,"column_end":24},"name":"captures_len","qualname":"<Regex>::captures_len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captures.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297835,"byte_end":297852,"line_start":716,"line_end":716,"column_start":12,"column_end":29},"name":"capture_locations","qualname":"<Regex>::capture_locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty set of capture locations that can be reused in\n multiple calls to `captures_read` or `captures_read_at`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":298203,"byte_end":298212,"line_start":725,"line_end":725,"column_start":12,"column_end":21},"name":"locations","qualname":"<Regex>::locations","value":"fn (&self) -> CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" An alias for `capture_locations` to preserve backward compatibility.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":932},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":298568,"byte_end":298580,"line_start":736,"line_end":736,"column_start":12,"column_end":24},"name":"CaptureNames","qualname":"::re_unicode::CaptureNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the names of all possible captures.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":943},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":299169,"byte_end":299174,"line_start":757,"line_end":757,"column_start":12,"column_end":17},"name":"Split","qualname":"::re_unicode::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947}],"decl_id":null,"docs":" Yields all substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":953},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":300150,"byte_end":300156,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::re_unicode::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957}],"decl_id":null,"docs":" Yields at most `N` substrings delimited by a regular expression match.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1905},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":301363,"byte_end":301379,"line_start":830,"line_end":830,"column_start":12,"column_end":28},"name":"CaptureLocations","qualname":"::re_unicode::CaptureLocations","value":"","parent":null,"children":[],"decl_id":null,"docs":" CaptureLocations is a low level representation of the raw offsets of each\n submatch.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":963},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":301701,"byte_end":301710,"line_start":838,"line_end":838,"column_start":10,"column_end":19},"name":"Locations","qualname":"::re_unicode::Locations","value":"CaptureLocations","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `CaptureLocations` for backwards compatibility.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":302068,"byte_end":302071,"line_start":846,"line_end":846,"column_start":12,"column_end":15},"name":"get","qualname":"<CaptureLocations>::get","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end positions of the Nth capture group. Returns\n `None` if `i` is not a valid capture group or if the capture group did\n not match anything. The positions returned are *always* byte indices\n with respect to the original string matched.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":302047,"byte_end":302056,"line_start":845,"line_end":845,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":302366,"byte_end":302369,"line_start":855,"line_end":855,"column_start":12,"column_end":15},"name":"len","qualname":"<CaptureLocations>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of capturing groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":302345,"byte_end":302354,"line_start":854,"line_end":854,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":302729,"byte_end":302732,"line_start":866,"line_end":866,"column_start":12,"column_end":15},"name":"pos","qualname":"<CaptureLocations>::pos","value":"fn (&self, i: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" An alias for the `get` method for backwards compatibility.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":302708,"byte_end":302717,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":968},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":303356,"byte_end":303364,"line_start":882,"line_end":882,"column_start":12,"column_end":20},"name":"Captures","qualname":"::re_unicode::Captures","value":"Captures {  }","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972}],"decl_id":null,"docs":" Captures represents a group of captured strings for a single match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":304262,"byte_end":304265,"line_start":908,"line_end":908,"column_start":12,"column_end":15},"name":"get","qualname":"<Captures>::get","value":"fn (&self, i: usize) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match associated with the capture group at index `i`. If\n `i` does not correspond to a capture group, or if the capture group\n did not participate in the match, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":304550,"byte_end":304554,"line_start":914,"line_end":914,"column_start":12,"column_end":16},"name":"name","qualname":"<Captures>::name","value":"fn (&self, name: &str) -> Option<Match<'t>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the match for the capture group named `name`. If `name` isn't a\n valid capture group or didn't match anything, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":304986,"byte_end":304990,"line_start":923,"line_end":923,"column_start":12,"column_end":16},"name":"iter","qualname":"<Captures>::iter","value":"fn <'c> (&'c self) -> SubCaptureMatches<'c, 't>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which\n they appear in the regex. If a particular capture group didn't\n participate in the match, then `None` is yielded for that capture.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306001,"byte_end":306007,"line_start":943,"line_end":943,"column_start":12,"column_end":18},"name":"expand","qualname":"<Captures>::expand","value":"fn (&self, replacement: &str, dst: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expands all instances of `$name` in `replacement` to the corresponding\n capture group `name`, and writes them to the `dst` buffer given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306314,"byte_end":306317,"line_start":952,"line_end":952,"column_start":12,"column_end":15},"name":"len","qualname":"<Captures>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of captured groups.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306293,"byte_end":306302,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":309021,"byte_end":309038,"line_start":1036,"line_end":1036,"column_start":12,"column_end":29},"name":"SubCaptureMatches","qualname":"::re_unicode::SubCaptureMatches","value":"SubCaptureMatches {  }","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015}],"decl_id":null,"docs":" An iterator that yields all capturing matches in the order in which they\n appear in the regex.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":309678,"byte_end":309692,"line_start":1058,"line_end":1058,"column_start":12,"column_end":26},"name":"CaptureMatches","qualname":"::re_unicode::CaptureMatches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields all non-overlapping capture groups matching a\n particular regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":310384,"byte_end":310391,"line_start":1081,"line_end":1081,"column_start":12,"column_end":19},"name":"Matches","qualname":"::re_unicode::Matches","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular string.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":311016,"byte_end":311024,"line_start":1098,"line_end":1098,"column_start":11,"column_end":19},"name":"Replacer","qualname":"::re_unicode::Replacer","value":"Replacer","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1049}],"decl_id":null,"docs":" Replacer describes types that can be used to replace matches in a string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":311331,"byte_end":311345,"line_start":1106,"line_end":1106,"column_start":8,"column_end":22},"name":"replace_append","qualname":"::re_unicode::Replacer::replace_append","value":"fn (&mut self, caps: &Captures, dst: &mut String) -> ()","parent":{"krate":0,"index":1045},"children":[],"decl_id":null,"docs":" Appends text to `dst` to replace the current match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":311750,"byte_end":311762,"line_start":1115,"line_end":1115,"column_start":8,"column_end":20},"name":"no_expansion","qualname":"::re_unicode::Replacer::no_expansion","value":"fn <'r> (&'r mut self) -> Option<Cow<'r, str>>","parent":{"krate":0,"index":1045},"children":[],"decl_id":null,"docs":" Return a fixed unchanging replacement string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":312483,"byte_end":312489,"line_start":1140,"line_end":1140,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::re_unicode::Replacer::by_ref","value":"fn <'r> (&'r mut self) -> ReplacerRef<'r, Self>","parent":{"krate":0,"index":1045},"children":[],"decl_id":null,"docs":" Return a `Replacer` that borrows and wraps this `Replacer`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1912},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":312717,"byte_end":312728,"line_start":1149,"line_end":1149,"column_start":12,"column_end":23},"name":"ReplacerRef","qualname":"::re_unicode::ReplacerRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" By-reference adaptor for a `Replacer`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":313998,"byte_end":314006,"line_start":1191,"line_end":1191,"column_start":12,"column_end":20},"name":"NoExpand","qualname":"::re_unicode::NoExpand","value":"","parent":null,"children":[],"decl_id":null,"docs":" `NoExpand` indicates literal string replacement.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1921},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":314887,"byte_end":314896,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseSet {  }","parent":null,"children":[{"krate":0,"index":1922},{"krate":0,"index":1923}],"decl_id":null,"docs":" A sparse set used for representing ordered NFA states.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315275,"byte_end":315278,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseSet>::new","value":"fn (size: usize) -> SparseSet","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315454,"byte_end":315457,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseSet>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315519,"byte_end":315527,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315593,"byte_end":315601,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SparseSet>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315668,"byte_end":315674,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseSet>::insert","value":"fn (&mut self, value: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315850,"byte_end":315858,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"contains","qualname":"<SparseSet>::contains","value":"fn (&self, value: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315986,"byte_end":315991,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseSet>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1104},"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28366,"byte_end":28374,"line_start":779,"line_end":779,"column_start":9,"column_end":17},"name":"internal","qualname":"::internal","value":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1114},{"krate":0,"index":1115}],"decl_id":null,"docs":" The `internal` module exists to support suspicious activity, such as\n testing different matching engines and supporting the `regex-debug` CLI\n utility.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/lib.rs","byte_start":28334,"byte_end":28357,"line_start":778,"line_end":778,"column_start":1,"column_end":24}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":30861,"byte_end":30866,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":31528,"byte_end":31535,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":41443,"byte_end":41449,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":42080,"byte_end":42091,"line_start":87,"line_end":87,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":42226,"byte_end":42237,"line_start":93,"line_end":93,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43264,"byte_end":43272,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":70205,"byte_end":70214,"line_start":743,"line_end":743,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":72551,"byte_end":72559,"line_start":821,"line_end":821,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":73375,"byte_end":73387,"line_start":846,"line_end":846,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":78139,"byte_end":78150,"line_start":977,"line_end":977,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":79359,"byte_end":79371,"line_start":1016,"line_end":1016,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":83147,"byte_end":83152,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":83419,"byte_end":83424,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":84081,"byte_end":84086,"line_start":49,"line_end":49,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":88880,"byte_end":88891,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":98594,"byte_end":98607,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":99681,"byte_end":99691,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":110275,"byte_end":110285,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127598,"byte_end":127611,"line_start":1244,"line_end":1244,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127735,"byte_end":127739,"line_start":1250,"line_end":1250,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129570,"byte_end":129574,"line_start":1307,"line_end":1307,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129680,"byte_end":129692,"line_start":1313,"line_end":1313,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":137008,"byte_end":137025,"line_start":1512,"line_end":1512,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":144047,"byte_end":144050,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":144146,"byte_end":144149,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148207,"byte_end":148214,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151362,"byte_end":151371,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151545,"byte_end":151554,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151660,"byte_end":151669,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":153871,"byte_end":153880,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":154109,"byte_end":154118,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":154227,"byte_end":154236,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157638,"byte_end":157642,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157852,"byte_end":157856,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159097,"byte_end":159101,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159195,"byte_end":159199,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159322,"byte_end":159326,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159579,"byte_end":159583,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160131,"byte_end":160146,"line_start":14,"line_end":14,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":163646,"byte_end":163651,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":163900,"byte_end":163903,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":173078,"byte_end":173085,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":176856,"byte_end":176863,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":179844,"byte_end":179851,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":180027,"byte_end":180034,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185122,"byte_end":185126,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187517,"byte_end":187527,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188998,"byte_end":189007,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189658,"byte_end":189670,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208634,"byte_end":208639,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210004,"byte_end":210009,"line_start":66,"line_end":66,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210186,"byte_end":210191,"line_start":73,"line_end":73,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210496,"byte_end":210501,"line_start":84,"line_end":84,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210585,"byte_end":210590,"line_start":90,"line_end":90,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210801,"byte_end":210806,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":227258,"byte_end":227263,"line_start":519,"line_end":519,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231327,"byte_end":231332,"line_start":639,"line_end":639,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":232844,"byte_end":232851,"line_start":681,"line_end":681,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":233445,"byte_end":233459,"line_start":701,"line_end":701,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":234034,"byte_end":234039,"line_start":722,"line_end":722,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":235018,"byte_end":235024,"line_start":757,"line_end":757,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":235714,"byte_end":235726,"line_start":782,"line_end":782,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237180,"byte_end":237196,"line_start":823,"line_end":823,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":238934,"byte_end":238942,"line_start":871,"line_end":871,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":241887,"byte_end":241895,"line_start":940,"line_end":940,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":242122,"byte_end":242135,"line_start":948,"line_end":948,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":243626,"byte_end":243634,"line_start":993,"line_end":993,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":244283,"byte_end":244291,"line_start":1015,"line_end":1015,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":245088,"byte_end":245105,"line_start":1039,"line_end":1039,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":247480,"byte_end":247491,"line_start":1109,"line_end":1109,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":248080,"byte_end":248081,"line_start":1131,"line_end":1131,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":248745,"byte_end":248753,"line_start":1151,"line_end":1151,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":264579,"byte_end":264588,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":266142,"byte_end":266160,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269494,"byte_end":269501,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269785,"byte_end":269792,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":271019,"byte_end":271033,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":271327,"byte_end":271341,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273005,"byte_end":273010,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276064,"byte_end":276069,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276246,"byte_end":276251,"line_start":132,"line_end":132,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276439,"byte_end":276444,"line_start":140,"line_end":140,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276528,"byte_end":276533,"line_start":146,"line_end":146,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276744,"byte_end":276749,"line_start":156,"line_end":156,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":906},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":293205,"byte_end":293210,"line_start":578,"line_end":578,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":921},{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297264,"byte_end":297269,"line_start":698,"line_end":698,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":298649,"byte_end":298661,"line_start":738,"line_end":738,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":299260,"byte_end":299265,"line_start":762,"line_end":762,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":300237,"byte_end":300243,"line_start":797,"line_end":797,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":301737,"byte_end":301753,"line_start":840,"line_end":840,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":303480,"byte_end":303488,"line_start":888,"line_end":888,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306393,"byte_end":306401,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306628,"byte_end":306641,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":307688,"byte_end":307696,"line_start":995,"line_end":995,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":308341,"byte_end":308349,"line_start":1017,"line_end":1017,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":309142,"byte_end":309159,"line_start":1041,"line_end":1041,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":309785,"byte_end":309799,"line_start":1062,"line_end":1062,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":310470,"byte_end":310477,"line_start":1083,"line_end":1083,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":312811,"byte_end":312822,"line_start":1151,"line_end":1151,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":313405,"byte_end":313406,"line_start":1173,"line_end":1173,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1063}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":314048,"byte_end":314056,"line_start":1193,"line_end":1193,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315252,"byte_end":315261,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":316057,"byte_end":316066,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":30861,"byte_end":30866,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/backtrack.rs","byte_start":31528,"byte_end":31535,"line_start":79,"line_end":79,"column_start":32,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":41443,"byte_end":41449,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":42080,"byte_end":42091,"line_start":87,"line_end":87,"column_start":23,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/cache.rs","byte_start":42226,"byte_end":42237,"line_start":93,"line_end":93,"column_start":32,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1164},"to":{"krate":2,"index":1725}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":43264,"byte_end":43272,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":70205,"byte_end":70214,"line_start":743,"line_end":743,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":72551,"byte_end":72559,"line_start":821,"line_end":821,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":73375,"byte_end":73387,"line_start":846,"line_end":846,"column_start":14,"column_end":26},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":78139,"byte_end":78150,"line_start":977,"line_end":977,"column_start":6,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/compile.rs","byte_start":79359,"byte_end":79371,"line_start":1016,"line_end":1016,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":83147,"byte_end":83152,"line_start":21,"line_end":21,"column_start":30,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1261},"to":{"krate":1,"index":1623}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":83419,"byte_end":83424,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1261},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/error.rs","byte_start":84081,"byte_end":84086,"line_start":49,"line_end":49,"column_start":21,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1261},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":88880,"byte_end":88891,"line_start":116,"line_end":116,"column_start":6,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":98594,"byte_end":98607,"line_start":372,"line_end":372,"column_start":32,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":249},"to":{"krate":0,"index":802}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":99681,"byte_end":99691,"line_start":409,"line_end":409,"column_start":32,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1275},"to":{"krate":0,"index":802}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":110275,"byte_end":110285,"line_start":676,"line_end":676,"column_start":10,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127598,"byte_end":127611,"line_start":1244,"line_end":1244,"column_start":10,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":249},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":127735,"byte_end":127739,"line_start":1250,"line_end":1250,"column_start":6,"column_end":10},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129570,"byte_end":129574,"line_start":1307,"line_end":1307,"column_start":16,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":129680,"byte_end":129692,"line_start":1313,"line_end":1313,"column_start":6,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/exec.rs","byte_start":137008,"byte_end":137025,"line_start":1512,"line_end":1512,"column_start":6,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":144047,"byte_end":144050,"line_start":112,"line_end":112,"column_start":28,"column_end":31},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1342},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/expand.rs","byte_start":144146,"byte_end":144149,"line_start":118,"line_end":118,"column_start":22,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1342},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":148207,"byte_end":148214,"line_start":22,"line_end":22,"column_start":6,"column_end":13},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":149451,"byte_end":149456,"line_start":69,"line_end":69,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":7479},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151362,"byte_end":151371,"line_start":144,"line_end":144,"column_start":10,"column_end":19},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151545,"byte_end":151554,"line_start":151,"line_end":151,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1375},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":151660,"byte_end":151669,"line_start":159,"line_end":159,"column_start":20,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1375},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":153871,"byte_end":153880,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1387},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":154109,"byte_end":154118,"line_start":240,"line_end":240,"column_start":25,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1387},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":154227,"byte_end":154236,"line_start":248,"line_end":248,"column_start":20,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1387},"to":{"krate":0,"index":387}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157638,"byte_end":157642,"line_start":350,"line_end":350,"column_start":21,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":157852,"byte_end":157856,"line_start":359,"line_end":359,"column_start":6,"column_end":10},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159097,"byte_end":159101,"line_start":396,"line_end":396,"column_start":21,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159195,"byte_end":159199,"line_start":402,"line_end":402,"column_start":29,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159322,"byte_end":159326,"line_start":408,"line_end":408,"column_start":26,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2039}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/input.rs","byte_start":159579,"byte_end":159583,"line_start":422,"line_end":422,"column_start":27,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":2076}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/literal/mod.rs","byte_start":160131,"byte_end":160146,"line_start":14,"line_end":14,"column_start":10,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":163646,"byte_end":163651,"line_start":75,"line_end":75,"column_start":6,"column_end":11},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":163900,"byte_end":163903,"line_start":83,"line_end":83,"column_start":20,"column_end":23},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/pikevm.rs","byte_start":173078,"byte_end":173085,"line_start":342,"line_end":342,"column_start":6,"column_end":13},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":176856,"byte_end":176863,"line_start":77,"line_end":77,"column_start":6,"column_end":13},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":179844,"byte_end":179851,"line_start":161,"line_end":161,"column_start":16,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1465},"to":{"krate":2,"index":1703}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":180027,"byte_end":180034,"line_start":170,"line_end":170,"column_start":21,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1465},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":185122,"byte_end":185126,"line_start":298,"line_end":298,"column_start":6,"column_end":10},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":187517,"byte_end":187527,"line_start":380,"line_end":380,"column_start":6,"column_end":16},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/prog.rs","byte_start":188998,"byte_end":189007,"line_start":429,"line_end":429,"column_start":6,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_builder.rs","byte_start":189658,"byte_end":189670,"line_start":18,"line_end":18,"column_start":18,"column_end":30},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1578},"to":{"krate":2,"index":2204}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":208634,"byte_end":208639,"line_start":26,"line_end":26,"column_start":10,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1682},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210004,"byte_end":210009,"line_start":66,"line_end":66,"column_start":23,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1702},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210186,"byte_end":210191,"line_start":73,"line_end":73,"column_start":21,"column_end":26},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1702},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210496,"byte_end":210501,"line_start":84,"line_end":84,"column_start":21,"column_end":26},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1702},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210585,"byte_end":210590,"line_start":90,"line_end":90,"column_start":18,"column_end":23},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1702},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":210801,"byte_end":210806,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":227258,"byte_end":227263,"line_start":519,"line_end":519,"column_start":6,"column_end":11},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":231327,"byte_end":231332,"line_start":639,"line_end":639,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":232844,"byte_end":232851,"line_start":681,"line_end":681,"column_start":27,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":641},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":233445,"byte_end":233459,"line_start":701,"line_end":701,"column_start":27,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":652},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":234034,"byte_end":234039,"line_start":722,"line_end":722,"column_start":27,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":235018,"byte_end":235024,"line_start":757,"line_end":757,"column_start":27,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":673},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":235714,"byte_end":235726,"line_start":782,"line_end":782,"column_start":23,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":683},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":237180,"byte_end":237196,"line_start":823,"line_end":823,"column_start":6,"column_end":22},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1707},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":238934,"byte_end":238942,"line_start":871,"line_end":871,"column_start":10,"column_end":18},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":699},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":241887,"byte_end":241895,"line_start":940,"line_end":940,"column_start":25,"column_end":33},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":699},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":242122,"byte_end":242135,"line_start":948,"line_end":948,"column_start":29,"column_end":42},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":717},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":243626,"byte_end":243634,"line_start":993,"line_end":993,"column_start":27,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":699},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":244283,"byte_end":244291,"line_start":1015,"line_end":1015,"column_start":33,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":699},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":245088,"byte_end":245105,"line_start":1039,"line_end":1039,"column_start":27,"column_end":44},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":745},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":247480,"byte_end":247491,"line_start":1109,"line_end":1109,"column_start":50,"column_end":61},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1714},"to":{"krate":0,"index":757}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":248080,"byte_end":248081,"line_start":1131,"line_end":1131,"column_start":25,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":774},"to":{"krate":0,"index":757}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_bytes.rs","byte_start":248745,"byte_end":248753,"line_start":1151,"line_end":1151,"column_start":23,"column_end":31},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":777},"to":{"krate":0,"index":757}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":264579,"byte_end":264588,"line_start":14,"line_end":14,"column_start":6,"column_end":15},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1873},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":266142,"byte_end":266160,"line_start":59,"line_end":59,"column_start":23,"column_end":41},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":794},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":267260,"byte_end":267265,"line_start":87,"line_end":87,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1539},"to":{"krate":0,"index":802}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269494,"byte_end":269501,"line_start":158,"line_end":158,"column_start":13,"column_end":20},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":269785,"byte_end":269792,"line_start":174,"line_end":174,"column_start":26,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":813},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":271019,"byte_end":271033,"line_start":214,"line_end":214,"column_start":13,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_trait.rs","byte_start":271327,"byte_end":271341,"line_start":230,"line_end":230,"column_start":26,"column_end":40},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":273005,"byte_end":273010,"line_start":35,"line_end":35,"column_start":10,"column_end":15},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276064,"byte_end":276069,"line_start":125,"line_end":125,"column_start":23,"column_end":28},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1900},"to":{"krate":2,"index":7484}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276246,"byte_end":276251,"line_start":132,"line_end":132,"column_start":21,"column_end":26},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1900},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276439,"byte_end":276444,"line_start":140,"line_end":140,"column_start":21,"column_end":26},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1900},"to":{"krate":2,"index":2221}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276528,"byte_end":276533,"line_start":146,"line_end":146,"column_start":18,"column_end":23},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1900},"to":{"krate":2,"index":6657}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":276744,"byte_end":276749,"line_start":156,"line_end":156,"column_start":6,"column_end":11},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":293205,"byte_end":293210,"line_start":578,"line_end":578,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":297264,"byte_end":297269,"line_start":698,"line_end":698,"column_start":6,"column_end":11},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":298649,"byte_end":298661,"line_start":738,"line_end":738,"column_start":23,"column_end":35},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":932},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":299260,"byte_end":299265,"line_start":762,"line_end":762,"column_start":27,"column_end":32},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":943},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":300237,"byte_end":300243,"line_start":797,"line_end":797,"column_start":27,"column_end":33},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":953},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":301737,"byte_end":301753,"line_start":840,"line_end":840,"column_start":6,"column_end":22},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":303480,"byte_end":303488,"line_start":888,"line_end":888,"column_start":10,"column_end":18},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306393,"byte_end":306401,"line_start":957,"line_end":957,"column_start":25,"column_end":33},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":968},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":306628,"byte_end":306641,"line_start":965,"line_end":965,"column_start":29,"column_end":42},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":986},"to":{"krate":2,"index":7479}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":307688,"byte_end":307696,"line_start":995,"line_end":995,"column_start":27,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":968},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":308341,"byte_end":308349,"line_start":1017,"line_end":1017,"column_start":33,"column_end":41},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":968},"to":{"krate":2,"index":1779}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":309142,"byte_end":309159,"line_start":1041,"line_end":1041,"column_start":27,"column_end":44},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1011},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":309785,"byte_end":309799,"line_start":1062,"line_end":1062,"column_start":27,"column_end":41},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1023},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":310470,"byte_end":310477,"line_start":1083,"line_end":1083,"column_start":27,"column_end":34},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1034},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":312811,"byte_end":312822,"line_start":1151,"line_end":1151,"column_start":50,"column_end":61},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1912},"to":{"krate":0,"index":1045}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":313405,"byte_end":313406,"line_start":1173,"line_end":1173,"column_start":25,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1061},"to":{"krate":0,"index":1045}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/re_unicode.rs","byte_start":314048,"byte_end":314056,"line_start":1193,"line_end":1193,"column_start":23,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1064},"to":{"krate":0,"index":1045}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":315252,"byte_end":315261,"line_start":26,"line_end":26,"column_start":6,"column_end":15},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/dsmc/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.3.1/src/sparse.rs","byte_start":316057,"byte_end":316066,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1921},"to":{"krate":2,"index":1703}}]}